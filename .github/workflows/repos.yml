name: Check for New Repositories

on:
  push:
    branches:
      - main  # Adjust this according to your default branch

jobs:
  check_for_new_repos:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Extract intersphinx_mapping
        id: extract_mapping
        run: |
          filtered_mapping=$(python -c '
          with open("source/conf.py", "r") as f:
            conf_content = f.read()
            
          # Find the start and end of the intersphinx_mapping block
          start_idx = conf_content.find("intersphinx_mapping")
          end_idx = conf_content.find("}", start_idx)
          
          # Extract the block
          mapping_block = conf_content[start_idx:end_idx+1]
          
          # Find the start and end of the dictionary
          start_idx = mapping_block.find("{")
          end_idx = mapping_block.rfind("}")

          # Extract the dictionary part
          dictionary_string = mapping_block[start_idx:end_idx + 1]

          # Parse the dictionary string
          mapping_dict = eval(dictionary_string)

          # Extract keys from the dictionary
          filtered_mapping = list(mapping_dict.keys())
          print(filtered_mapping)
          ')
          echo "::set-output name=filtered_mapping::$filtered_mapping"

      
      - name: List Repositories
        id: list_repos
        uses: actions/github-script@v4
        with:
          script: |
            const response = await github.repos.listForOrg({
              org: 'salt-extensions',
              per_page: 100
            });
            return response.data.map(repo => repo.name);

      - name: Debug Intersphinx Mapping
        run: |
          echo "Intersphinx Mapping: ${{ steps.extract_mapping.outputs.filtered_mapping }}"
      
      - name: Debug Repos
        run: |
          echo "Repos: ${{ steps.list_repos.outputs.result }}"    

      - name: Compare Repositories
        run: |

          # Define the string
          string=${{ steps.list_repos.outputs.result }}

          # Remove leading and trailing square brackets
          string="${string#"["}"
          string="${string%"]"}"

          # Replace commas with spaces
          string="${string//,/ }"

          # Convert the string to an array
          declare -a array=($string)

          # Print the array for testing
          declare -p array

          # Loop through the array
          for repo in "${repos[@]}"; do
              # Check if the repo is missing from the filtered mapping
              if ! echo "${{ steps.extract_mapping.outputs.filtered_mapping }}" | grep -q "$repo"; then
                  echo "Repository $repo is missing from Intersphinx Mapping."
              fi
          done
    
      - name: Add Missing Repository
        if: steps.extract_mapping.outputs.filtered_mapping
        run: |
          # Read the content of conf.py
          python -c '
          import os

          repo_name = "saltext-tsl"
          repo_url = "https://m3gh4nn.github.io/dummy-repo/"
          # Read the content of conf.py
          with open("source/conf.py", "r") as f:
            conf_content = f.read()

          # Find the start and end of the intersphinx_mapping block
          start_idx = conf_content.find("intersphinx_mapping")
          end_idx = conf_content.find("}", start_idx)

          # Extract the block
          mapping_block = conf_content[start_idx:end_idx + 1]

          # Find the start and end of the dictionary
          start_idx = mapping_block.find("{")
          end_idx = mapping_block.rfind("}")

          # Extract the dictionary part
          dictionary_string = mapping_block[start_idx:end_idx + 1]

          # Parse the dictionary string
          mapping_dict = eval(dictionary_string)

          # Add the missing repository to the mapping dictionary
          mapping_dict[repo_name] = (repo_url, None)
          # print(mapping_dict)

          # Reconstruct the mapping block
          new_mapping_block = "intersphinx_mapping = " + repr(mapping_dict)

          print(new_mapping_block)


          # Replace the old mapping block with the new one
          conf_content = conf_content[:start_idx] + new_mapping_block + conf_content[end_idx + 1:]

          print(conf_content)

          # Attempt to write to the file
          try:
            with open("path/to/file.py", "w") as file:
              file.write(new_mapping_block)
              print("Write operation successful.")
          except Exception as e:
            print(f"Error occurred: {e}")
          '